{"version":3,"sources":["images/raw.png","images/gazoot.png","images/nozoma.png","images/chatrade.png","App.js","projects.js","skills.js","landing.js","serviceWorker.js","index.js"],"names":["module","exports","App","className","href","Projects","border","alt","width","src","raw","nozoma","chatrade","gazoot","Skills","Landing","activeClass","to","spy","smooth","offset","duration","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8GAAAA,EAAOC,QAAU,IAA0B,iC,mBCA3CD,EAAOC,QAAU,IAA0B,oC,mBCA3CD,EAAOC,QAAU,IAA0B,oC,mBCA3CD,EAAOC,QAAU,IAA0B,sC,+ICuB5BC,MApBf,WACE,OACE,yBAAKC,UAAU,OACb,8BAEE,yBAAKA,UAAU,SACX,qCACA,sJACA,6BACI,uBAAGC,KAAK,+BAAR,UACA,uBAAGA,KAAK,uDAAR,iB,oEC+BDC,MApCf,WACA,OACI,yBAAKF,UAAU,YACX,yBAAKA,UAAU,SACX,0CACA,uBAAGA,UAAU,OAAOC,KAAK,8DAA6D,yBAAKE,OAAO,IAAIC,IAAI,GAAGC,MAAM,QAAQC,IAAKC,OAChI,yLACA,uBAAGP,UAAU,QAAQC,KAAK,8DAA1B,iBACA,uBAAGD,UAAU,QAAQC,KAAK,+CAA1B,aACA,uBAAGD,UAAU,QAAQC,KAAK,8CAA1B,aAGJ,yBAAKD,UAAU,SACX,sCACA,uBAAGC,KAAK,qCAAqCD,UAAU,QAAO,yBAAKG,OAAO,IAAIC,IAAI,GAAGC,MAAM,QAAQC,IAAKE,OACxG,2MACA,uBAAGR,UAAU,QAAQC,KAAK,sCAA1B,WAGJ,yBAAKD,UAAU,SACX,wCACA,uBAAGC,KAAK,uCAAuCD,UAAU,QAAO,yBAAKG,OAAO,IAAIC,IAAI,GAAGC,MAAM,QAAQC,IAAKG,OAC1G,+MACA,uBAAGT,UAAU,QAAQC,KAAK,wCAA1B,WAGJ,yBAAKD,UAAU,SACX,sCACA,uBAAGC,KAAK,qCAAqCD,UAAU,QAAO,yBAAKG,OAAO,IAAIC,IAAI,GAAGC,MAAM,QAAQC,IAAKI,OACxG,sQACA,uBAAGV,UAAU,QAAQC,KAAK,sCAA1B,aCbGU,MAtBf,WACI,OACA,yBAAKX,UAAU,UACP,sCACA,6BACI,mCACA,4CACA,mCACA,uCACA,oCACA,yCACA,yCACA,oCACA,sCACA,uCACA,wCACA,wC,QCODY,MAtBf,WACE,OACE,yBAAKZ,UAAU,WACX,yBAAKA,UAAU,SACX,4CACA,6CAGJ,yBAAKA,UAAU,SACb,kBAAC,OAAD,CACEa,YAAY,SACZC,GAAG,QACHC,KAAK,EACLC,QAAQ,EACRC,QAAS,GACTC,SAAW,KANb,sBCDUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCFNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KAEE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,OAGFC,SAASC,eAAe,SD0GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ef5d4a39.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/raw.f3195b38.png\";","module.exports = __webpack_public_path__ + \"static/media/gazoot.6445dc77.png\";","module.exports = __webpack_public_path__ + \"static/media/nozoma.f43a9b81.png\";","module.exports = __webpack_public_path__ + \"static/media/chatrade.c230d2a4.png\";","import React from 'react';\r\nimport './css/styles.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <body>\r\n\r\n        <div className=\"about\">\r\n            <h1>About</h1>\r\n            <p>I'm a Brisbane based Web Developer focused on continual growth and development in myself, there's always more to learn!</p>\r\n            <div>\r\n                <a href='https://github.com/Ashamaly'>GitHub</a>\r\n                <a href='https://www.linkedin.com/in/ashley-beard-253900191/'>LinkedIn</a>\r\n            </div>\r\n            \r\n        </div>\r\n\r\n    </body>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport './css/styles.css';\r\n\r\nimport raw from './images/raw.png'\r\nimport gazoot from './images/gazoot.png'\r\nimport nozoma from './images/nozoma.png'\r\nimport chatrade from './images/chatrade.png'\r\n\r\nfunction Projects() {\r\nreturn (\r\n    <div className='projects'>\r\n        <div className='pitem'>\r\n            <h1>Raw Barber</h1>\r\n            <a className='imga' href='https://github.com/DanielLMA/MERN_Assignment_Documentation'><img border=\"0\" alt=\"\" width=\"250px\" src={raw} /></a>\r\n            <p>The purpose of this group project was to create an website for our client Raw Barber to help increase online presence to their requests and specification.</p>\r\n            <a className='links' href='https://github.com/DanielLMA/MERN_Assignment_Documentation'>Documentation</a>\r\n            <a className='links' href='https://github.com/DanielLMA/MERN_front_end'>Front end</a>\r\n            <a className='links' href='https://github.com/DanielLMA/MERN_back_end'>Back end</a>\r\n        </div>\r\n\r\n        <div className='pitem'>\r\n            <h1>Nozoma</h1>\r\n            <a href='https://github.com/Ashamaly/round2' className='imga'><img border=\"0\" alt=\"\" width=\"250px\" src={nozoma} /></a>\r\n            <p>The purpose of this course is to create a two-sided marketplace that connects users to each other, allowing them to buy and sell books between them with rails and postgres.</p>\r\n            <a className='links' href='https://github.com/Ashamaly/round2'>GitHub</a>\r\n        </div>\r\n\r\n        <div className='pitem'>\r\n            <h1>ChaTrade</h1>\r\n            <a href='https://github.com/Ashamaly/chat-app' className='imga'><img border=\"0\" alt=\"\" width=\"250px\" src={chatrade} /></a>\r\n            <p>The purpose of ChaTrade is to connect registered users to one another via chat rooms so they can practice speaking different languages with each other using rails and postgres.</p>\r\n            <a className='links' href='https://github.com/Ashamaly/chat-app'>GitHub</a>\r\n        </div>\r\n\r\n        <div className='pitem'>\r\n            <h1>Gazoot</h1>\r\n            <a href='https://github.com/Ashamaly/Gazoot' className='imga'><img border=\"0\" alt=\"\" width=\"250px\" src={gazoot} /></a>\r\n            <p>Gazoot is a quiz/action hybrid created using Ruby where answering questions correctly (and quickly!) allow you to attack and take down a monster. This project was to review and build on skills learned in my first 2 weeks of coding.</p>\r\n            <a className='links' href='https://github.com/Ashamaly/Gazoot'>GitHub</a>\r\n        </div>\r\n    </div>\r\n);\r\n}\r\n\r\nexport default Projects;","import React from 'react';\r\nimport './css/styles.css';\r\n\r\nfunction Skills() {\r\n    return(\r\n    <div className=\"skills\">\r\n            <h1>Skills</h1>\r\n            <div>\r\n                <p>Ruby</p>\r\n                <p>Ruby on Rails</p>\r\n                <p>HTML</p>\r\n                <p>CSS/SCSS</p>\r\n                <p>React</p>\r\n                <p>PostgreSQL</p>\r\n                <p>Javascript</p>\r\n                <p>Bulma</p>\r\n                <p>MongoDB</p>\r\n                <p>Mongoose</p>\r\n                <p>Bootstrap</p>\r\n                <p>Trello</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Skills;","import React from 'react';\r\nimport './css/styles.css';\r\nimport { Link } from \"react-scroll\";\r\n\r\nfunction Landing() {\r\n  return (\r\n    <div className=\"landing\">\r\n        <div className=\"title\">\r\n            <h1>Ashley Beard</h1>\r\n            <p>Web Developer</p>\r\n        </div>\r\n\r\n        <div className=\"arrow\">\r\n          <Link\r\n            activeClass=\"active\"\r\n            to=\"about\"\r\n            spy={true}\r\n            smooth={true}\r\n            offset={-70}\r\n            duration= {200}\r\n            >Scroll for more</Link>\r\n        </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Landing;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","// REMEMBER\r\n// RUN  npm run deploy\r\n// IN ORDER TO UPDATE YOUR CHANGES HERE TO GH PAGES\r\n// THANKS ASH LOVE YOU\r\n\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './css/index.css';\r\nimport App from './App';\r\n// import Header from './header';\r\n// import Footer from './footer';\r\nimport Projects from './projects';\r\nimport Skills from './skills';\r\nimport Landing from './landing'\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    {/* <Header /> */}\r\n    <Landing />\r\n    <App />\r\n    <Projects />\r\n    <Skills />\r\n    {/* <Footer /> */}\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}